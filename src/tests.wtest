import direcciones.*
import elementosJuego.*
import juego.*
import niveles.*
import personajePrincipal.*
import inventarioPersonaje.*
import enemigos.*
import wollok.game.*
import texto.*

const unEnemigo = new Enemigo(position = game.at(0,0), especie = zombieBeta)
	
const enemigoMayor = new Enemigo(position=game.at(0,0), especie = zombieAlfa)

const algunProyectil = new Proyectil(tipoProyectil = comun)


describe "Jugador"{
	
	test "Al moverse hacia arriba, el jugador actualiza su posici贸n" {

		personaje.position(game.at(0,0))
		personaje.moverA(arriba)
		assert.equals(personaje.position(),game.at(0,1))
	}
	
	
	test "Al chocarse con el borde, el personaje se mantiene en la misma posici贸n en la que estaba" {
		
		personaje.position(game.at(1,10))
		personaje.chocasteConBorde()
		assert.equals(personaje.position(),game.at(1,10))
		
	}

	test "El jugador recupera la vida que perdi贸 al chocarse con la curita"{
		game.addVisual(curita)
		curita.chocasteConJugador()
		assert.equals((personaje.vida()).size(),6)

	}
	
	test "Al levantar una mina el jugador puede luego plantarla" {
		
		game.addVisual(personaje)
		game.addVisual(mina)
		mina.chocasteConJugador() 
		assert.that(mina.enInventario())
	}

	test "Cuando el jugador planta una mina, permanece en esa posici贸n y no puede volver a plantarla" {
		
		game.addVisual(mina)
		mina.enInventario(true)
		mina.position(game.at(0,2))
		mina.plantarseSoloUnaVez()
		mina.chocasteConJugador() 
		assert.notThat(mina.enInventario())
		
	}

	test "El jugador pasa de nivel cuando elimina a todos los enemigos del nivel en el que se encuentra" {
		game.addVisual(personaje)
		personaje.enemigosMatados(personaje.nivelActual().puntosAConseguir())
		personaje.disparar()
		assert.that(game.hasVisual(fondoIntroNivel_2)
	}

	test "El jugador pierde vida cuando el enemigo Boss le dispara" {

		const proyectilEnemigo = new ProyectilEnemigo()

		game.addVisual(personaje)
		game.addVisual(boss)
		proyectilEnemigo.chocasteConJugador()
		assert.equals(personaje.vida().size(),5)
		
	}

	test "El jugador gana el juego cuando elimina al enemigo boss y las oleadas del nivel 3" {

		personaje.nivelActual(nivel_3)
		personaje.enemigosMatados(nivelActual().puntosAConseguir())
		personaje.disparar()
		assert.that(game.hasVisual(finDeJuego))

	}
}

describe "Enemigo"{


	test "Cuando se le dispara, el enemigo pierde vida " {
		
		game.addVisual(enemigoMayor)
		game.addVisual(algunProyectil)
		
		algunProyectil.chocasteConEnemigo(enemigoMayor)
		assert.equals(enemigoMayor.vida(),1)
	}

	test "Cuando el enemigo pierde toda su vida, muere" {

		game.addVisual(unEnemigo)
		game.addVisual(algunProyectil)
		algunProyectil.chocasteConEnemigo(unEnemigo)
		assert.notThat(game.hasVisual(unEnemigo))
		
	}
	
	test "Una mina plantada elimina a enemigos con poca vida" {
		
		game.addVisual(mina)
		mina.plantarse() 
		game.addVisual(enemigoMayor)
		mina.chocasteConEnemigo(enemigoMayor)
		assert.notThat(game.hasVisual(enemigoMayor))
	}
	
	test "Una mina plantada no puede eliminar al Boss" {
		
		game.addVisual(mina)
		mina.plantarse()
		game.addVisual(boss)
		mina.chocasteConEnemigo(boss)
		assert.that(game.hasVisual(boss))
	}
}

describe "Cargador" {
	
	test "Cuando el personaje dispara, tiene una bala menos en su inventario" {
		
		municion.agregarProyectiles()
		personaje.disparar()
		assert.equals(municion.elCargador().size(),4)
	}
	
	test "Cuando el personaje recarga su municion, vuelve a tener balas en su inventario" {
		game.addVisual(personaje)
		personaje.cargador().elCargador([]) // no hay balas en el cargador del personaje
		municion.recargar()
		assert.equals(municion.elCargador().size(),5)
	}
	 
	test "Con un cargador con balas chetadas, el jugador puede matar a un enemigo con mayor vida" {
		
		const proyectilChetado = new Proyectil(tipoProyectil = chetado)
		
		game.addVisual(proyectilChetado)
		game.addVisual(enemigoMayor) // enemigo de vida 2
		proyectilChetado.chocasteConEnemigo(enemigoMayor)
		assert.notThat(game.hasVisual(enemigoMayor))
	}
}
 




 